/* Generated by Streams Studio: March 10, 2016 at 11:35:03 AM EST */
package application;


import org.apache.log4j.Logger;

import com.ibm.streams.operator.AbstractOperator;
import com.ibm.streams.operator.OperatorContext;
import com.ibm.streams.operator.model.PrimitiveOperator;

/**
 * This operator sets the TEXTANALYTICS_HOME system property at runtime.
 * It is a convenience operator provided so that you don't have to set it at the instance level or remember to set it before launching the application.
 * @exclude
 */
@PrimitiveOperator(name="PropertyHelper", namespace="application",
description="Java Operator PropertyHelper")
public class PropertyHelper extends AbstractOperator {

    /**
     * Initialize this operator. Called once before any tuples are processed.
     * @param context OperatorContext for this operator.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public synchronized void initialize(OperatorContext context)
            throws Exception {
    	// Must call super.initialize(context) to correctly setup an operator.
        super.initialize(context);
        System.setProperty("TEXTANALYTICS_HOME", context.getToolkitDirectory() + "/../com.ibm.streams.text/lib/TextAnalytics");
    }

    /**
     * Notification that initialization is complete and all input and output ports 
     * are connected and ready to receive and submit tuples.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public synchronized void allPortsReady() throws Exception {
    }
    

    /**
     * Shutdown this operator, which will interrupt the thread
     * executing the <code>produceTuples()</code> method.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    public synchronized void shutdown() throws Exception {
        OperatorContext context = getOperatorContext();
        Logger.getLogger(this.getClass()).trace("Operator " + context.getName() + " shutting down in PE: " + context.getPE().getPEId() + " in Job: " + context.getPE().getJobId() );
        // Must call super.shutdown()
        super.shutdown();
    }
}
