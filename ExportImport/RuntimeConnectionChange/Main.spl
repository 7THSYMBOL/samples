

composite Main {
param
    expression<float64> $initDelay: 10.0;
    graph
        stream<rstring tweet> Tweets = Beacon() {
            logic state: {
                list<rstring> tweetList = ["I love my #iphone!",
                "Just found a great restaurant, thanks #siri",
                "#siri just told me where I can go to repair my #iphone",
                "#android rocks!"];
            }
        param iterations: 90;
        // We need a delay for the connections to be established
        initDelay: $initDelay;
        period: 1.0;
        output Tweets:
            tweet = "Tweet "+(rstring)IterationCount()+" "+tweetList[IterationCount()%(uint64)size(tweetList)];
        }

        stream<rstring pattern> Trending = Beacon() {
        param iterations: 2;
        initDelay: 30.0 + $initDelay;
        period: 30.0;
        output Trending:
            pattern = IterationCount() == 0ul? "#android" : "#siri";
        }

    () as exporter = FilterTokenizeExport(Tweets;Trending) {

    }

   stream<list<rstring> tokens> Iphone = Import() {
        param subscription: topic=="#iphone";
   }

   () as sink = FileSink(Iphone) {
        param file: "importIphone.txt";
   }

   stream<list<rstring> tokens> Android = Import() {
       param subscription: topic=="#android";
   }

   () as sinkAndroid = FileSink(Android) {
        param file: "importAndroid.txt";
   }

  // Runtime subscription adjustment
  stream<list<rstring> tokens> ChangeSubscription = Import() {
    param subscription: topic == "#iphone";
  }

  () as changeSubscription = FileSink(ChangeSubscription) {
      logic state: {
        mutable set<rstring> additionalTags={};
        mutable rstring subscriptionString = "topic==\"#iphone\"";
      }
      onTuple ChangeSubscription: {
         mutable boolean hasIphone = false;
         for (rstring tok in tokens) {
            if (size(regexMatch(tok,"#iphone")) > 0) {
               hasIphone = true;
            }
         }
         if (hasIphone) {
         // we only update the subscription if we it contains #iphone. 
            for (rstring tok in tokens) {
               if (!has(additionalTags,tok) && size(regexMatch(tok,"^#")) >0) {
                  //if this is a tag, and it's not already in additional tags then we update the subscription
                  insertM(additionalTags,tok);
                  subscriptionString += " || topic==\""+tok+"\"";
                  setInputPortImportSubscription(subscriptionString,0u);
               } 
            }
         }
      }
      param file: "updateSubscription.txt";
  }

}
